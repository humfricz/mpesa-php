<?php
/**
* @package ModoPesa M-Pesa - PHP
* @subpackage Main M-Pesa Class
* @version 0.18.01
* @author Mauko Maunde < hi@mauko.co.ke >
* @link https://developer.safaricom.co.ke/docs
**/
namespace Safaricom;

/**
* @class MPESA - Core Safaricom M-Pesa wrapper class for all APIs
* @see https://developer.safaricom.co.ke/docs
* Endpoints should be properly validated to make sure that they contain the port, URI and domain name or publicly available IP.
**/
class MPESA
{
    /**
     * @param string 
     * Business Name as registered with Safaricom M-Pesa
     */
    private $business;

    /**
     * @param string 
     * Six-digit M-Pesa business Till or Paybill number
     */
    private $shortcode;

    /**
     * @param string 
     * Daraja app consumer key
     */
    private $consumer_key;

    /**
     * @param string 
     * Daraja app consumer secret
     */
    private $consumer_secret;

    /**
     * @param string 
     * M-Pesa web portal username
     */
    private $username;

    /**
     * @param string 
     * M-Pesa web portal password
     */
    private $password;

    /**
     * @param string 
     * The M-Pesa Public Key, an X509  certificate 
     */
    private $public_key = '-----BEGIN CERTIFICATE-----
MIIGkzCCBXugAwIBAgIKXfBp5gAAAD+hNjANBgkqhkiG9w0BAQsFADBbMRMwEQYK
CZImiZPyLGQBGRYDbmV0MRkwFwYKCZImiZPyLGQBGRYJc2FmYXJpY29tMSkwJwYD
VQQDEyBTYWZhcmljb20gSW50ZXJuYWwgSXNzdWluZyBDQSAwMjAeFw0xNzA0MjUx
NjA3MjRaFw0xODAzMjExMzIwMTNaMIGNMQswCQYDVQQGEwJLRTEQMA4GA1UECBMH
TmFpcm9iaTEQMA4GA1UEBxMHTmFpcm9iaTEaMBgGA1UEChMRU2FmYXJpY29tIExp
bWl0ZWQxEzARBgNVBAsTClRlY2hub2xvZ3kxKTAnBgNVBAMTIGFwaWdlZS5hcGlj
YWxsZXIuc2FmYXJpY29tLmNvLmtlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
CgKCAQEAoknIb5Tm1hxOVdFsOejAs6veAai32Zv442BLuOGkFKUeCUM2s0K8XEsU
t6BP25rQGNlTCTEqfdtRrym6bt5k0fTDscf0yMCoYzaxTh1mejg8rPO6bD8MJB0c
FWRUeLEyWjMeEPsYVSJFv7T58IdAn7/RhkrpBl1dT7SmIZfNVkIlD35+Cxgab+u7
+c7dHh6mWguEEoE3NbV7Xjl60zbD/Buvmu6i9EYz+27jNVPI6pRXHvp+ajIzTSsi
eD8Ztz1eoC9mphErasAGpMbR1sba9bM6hjw4tyTWnJDz7RdQQmnsW1NfFdYdK0qD
RKUX7SG6rQkBqVhndFve4SDFRq6wvQIDAQABo4IDJDCCAyAwHQYDVR0OBBYEFG2w
ycrgEBPFzPUZVjh8KoJ3EpuyMB8GA1UdIwQYMBaAFOsy1E9+YJo6mCBjug1evuh5
TtUkMIIBOwYDVR0fBIIBMjCCAS4wggEqoIIBJqCCASKGgdZsZGFwOi8vL0NOPVNh
ZmFyaWNvbSUyMEludGVybmFsJTIwSXNzdWluZyUyMENBJTIwMDIsQ049U1ZEVDNJ
U1NDQTAxLENOPUNEUCxDTj1QdWJsaWMlMjBLZXklMjBTZXJ2aWNlcyxDTj1TZXJ2
aWNlcyxDTj1Db25maWd1cmF0aW9uLERDPXNhZmFyaWNvbSxEQz1uZXQ/Y2VydGlm
aWNhdGVSZXZvY2F0aW9uTGlzdD9iYXNlP29iamVjdENsYXNzPWNSTERpc3RyaWJ1
dGlvblBvaW50hkdodHRwOi8vY3JsLnNhZmFyaWNvbS5jby5rZS9TYWZhcmljb20l
MjBJbnRlcm5hbCUyMElzc3VpbmclMjBDQSUyMDAyLmNybDCCAQkGCCsGAQUFBwEB
BIH8MIH5MIHJBggrBgEFBQcwAoaBvGxkYXA6Ly8vQ049U2FmYXJpY29tJTIwSW50
ZXJuYWwlMjBJc3N1aW5nJTIwQ0ElMjAwMixDTj1BSUEsQ049UHVibGljJTIwS2V5
JTIwU2VydmljZXMsQ049U2VydmljZXMsQ049Q29uZmlndXJhdGlvbixEQz1zYWZh
cmljb20sREM9bmV0P2NBQ2VydGlmaWNhdGU/YmFzZT9vYmplY3RDbGFzcz1jZXJ0
aWZpY2F0aW9uQXV0aG9yaXR5MCsGCCsGAQUFBzABhh9odHRwOi8vY3JsLnNhZmFy
aWNvbS5jby5rZS9vY3NwMAsGA1UdDwQEAwIFoDA9BgkrBgEEAYI3FQcEMDAuBiYr
BgEEAYI3FQiHz4xWhMLEA4XphTaE3tENhqCICGeGwcdsg7m5awIBZAIBDDAdBgNV
HSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwJwYJKwYBBAGCNxUKBBowGDAKBggr
BgEFBQcDAjAKBggrBgEFBQcDATANBgkqhkiG9w0BAQsFAAOCAQEAC/hWx7KTwSYr
x2SOyyHNLTRmCnCJmqxA/Q+IzpW1mGtw4Sb/8jdsoWrDiYLxoKGkgkvmQmB2J3zU
ngzJIM2EeU921vbjLqX9sLWStZbNC2Udk5HEecdpe1AN/ltIoE09ntglUNINyCmf
zChs2maF0Rd/y5hGnMM9bX9ub0sqrkzL3ihfmv4vkXNxYR8k246ZZ8tjQEVsKehE
dqAmj8WYkYdWIHQlkKFP9ba0RJv7aBKb8/KP+qZ5hJip0I5Ey6JJ3wlEWRWUYUKh
gYoPHrJ92ToadnFCCpOlLKWc0xVxANofy6fqreOVboPO0qTAYpoXakmgeRNLUiar
0ah6M/q/KA==
-----END CERTIFICATE-----';
    
    /**
     * @param string 
     * Security credentials generated by encrypting the base64 encoded initiator password with M-Pesa’s public key.
     */
    private $credentials;

    /**
     * @param array
     * List of HTTP Status codes that will be returned whenever there are errors in a request. 
     */
    private $http_status_codes = [
        200 => 'Success',
        400 => 'Bad Request',
        401 => 'Unauthorized',
        403 => 'Forbidden',
        404 => 'Not Found',
        405 => 'Method Not Allowed',
        406 => 'Not Acceptable – You requested a format that isn’t json',
        429 => 'Too Many Requests – You’re requesting too many kisses! Slow down!',
        500 => 'Internal Server Error – We had a problem with our server. Try again later.',
        503 => 'Service Unavailable – We’re temporarily offline for maintenance. Please try again later.'
    ];

    /**
     * @param string 
     * The path that stores information of time out transactions.
     * It should be properly validated to make sure that it contains the port, URI and domain name or publicly available IP.
     */
    private $timeout_url;

    /**
     * @param string 
     * The path that receives results from M-Pesa.
     * It should be properly validated to make sure that it contains the port, URI and domain name or publicly available IP.
     */
    private $result_url;

    /**
     * @param string 
     * The path that confirms/rejects M-Pesa transactions after validation.
     * It should be properly validated to make sure that it contains the port, URI and domain name or publicly available IP.
     */
    private $confirmation_url;

    /**
     * @param string 
     * The path that validates M-Pesa transactions.
     * It should be properly validated to make sure that it contains the port, URI and domain name or publicly available IP.
     */
    private $validation_url;

    /**
     * @param bool 
     * Whether this is a production environment or not
     */
    protected $live;

    /**
     * Constructor method for M-Pesa Core class.
     * @param array $config Array of M-Pesa configuration options
     * @param string $credentials Security credentials
     */
    public function __construct( $config, $credentials = null )
    {
      $this -> business = $config['name'];
      $this -> shortcode = $config['shortcode'];
      $this -> type = $config['type'];
      $this -> key = $config['key'];
      $this -> secret = $config['secret'];
      $this -> username = $config['username'];
      $this -> password = $config['password'];
      $this -> passkey = $config['passkey'];
      $this -> callback_url = $config['callback_url'];
      $this -> timeout_url = $config['timeout_url'];
      $this -> result_url = $config['result_url'];
      $this -> confirmation_url = $config['confirmation_url'];
      $this -> validation_url = $config['validation_url'];

      $this -> live = ( $config['live'] == "yes" ) ? true : false;

      openssl_public_encrypt( $this -> password, $encrypted, $this -> public_key, OPENSSL_PKCS1_PADDING );

      $this -> credentials = is_null( $credentials ) ? base64_encode( $encrypted ) : null;

      $this -> getToken();
    }

    /**
     * Use this code to authenticate your app and get an OAuth access token. 
     * An access token expires in 3600 seconds ( 1 hour )
     */
    protected function auth()
    {
      $credentials = base64_encode( "{$this -> key}:{$this -> secret}" );
      
      $curl = curl_init();
      curl_setopt( $curl, CURLOPT_URL, "https://sandbox.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials" );
      curl_setopt( $curl, CURLOPT_HTTPHEADER, [ "Content-Type:application/json", "Authorization: Basic {$credentials}" ] );
      curl_setopt( $curl, CURLOPT_HEADER, true );
      curl_setopt( $curl, CURLOPT_SSL_VERIFYPEER, false );

      return json_decode( curl_exec( $curl ) );
    }

    /**
     * This is used to generate tokens
     * @return mixed
     */
    protected function getToken()
    {
      $url = ( $this -> live ) ? 'https://api.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials' : 'https://sandbox.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials';
      $credentials = base64_encode( "{$this -> key}:{$this -> secret}" );

      $curl = curl_init();
      curl_setopt( $curl, CURLOPT_URL, $url );
      curl_setopt( $curl, CURLOPT_HTTPHEADER, [ "Authorization: Basic {$credentials}" ] );
      curl_setopt( $curl, CURLOPT_HEADER, false );
      curl_setopt( $curl, CURLOPT_RETURNTRANSFER, 1 );

      $this -> token = json_decode( curl_exec( $curl ) ) -> access_token;
    }

    /**
     * Whenever M-Pesa receives a transaction on the shortcode, M-Pesa triggers a validation request against the validation URL 
     * and the 3rd party system responds to M-Pesa with a validation response ( either a success or an error code ).
     */
    public function register()
    {
      $curl = curl_init();
      curl_setopt( $curl, CURLOPT_URL, "https://sandbox.safaricom.co.ke/mpesa/c2b/v1/registerurl" );
      curl_setopt( $curl, CURLOPT_HTTPHEADER, [ "Content-Type:application/json", "Authorization:Bearer {$this -> token}" ] );
      curl_setopt( $curl, CURLOPT_RETURNTRANSFER, true );
      curl_setopt( $curl, CURLOPT_POST, true );
      curl_setopt( $curl, CURLOPT_POSTFIELDS, json_encode( [
        'ShortCode'         => $this -> shortcode,
        'ResponseType'      => 'Completed',
        'ConfirmationURL'   => $this -> confirmation_url,
      ] ) );

      return json_decode( curl_exec( $curl ) );
    }

    /**
     * Transaction Reversal API
     * Use this function to initiate a reversal request
     * @param $TransactionID - Organization Receiving the funds
     * @param $Amount - Amount involved
     * @param $ReceiverParty - Organization /MSISDN sending the transaction
     * @param $RecieverIdentifierType - Type of organization receiving the transaction
     * @param $Occasion -   Optional Parameter
     * @param $Remarks - Comments that are sent along with the transaction.
     * @return mixed-string
     */
    public function reverse( $TransactionID, $Amount, $ReceiverParty, $RecieverIdentifierType, $Occasion = "TransactionReversal", $Remarks = "Transaction Reversal" )
    {
      $url = ( $this -> live ) ? 'https://api.safaricom.co.ke/mpesa/reversal/v1/request' : 'https://sandbox.safaricom.co.ke/mpesa/reversal/v1/request';

      $curl = curl_init();
      curl_setopt( $curl, CURLOPT_URL, $url );
      curl_setopt( $curl, CURLOPT_HTTPHEADER, [ "Content-Type:application/json", "Authorization:Bearer {$this -> token}" ] );
      curl_setopt( $curl, CURLOPT_HEADER, false );
      curl_setopt( $curl, CURLOPT_RETURNTRANSFER, true );
      curl_setopt( $curl, CURLOPT_POST, true );
      curl_setopt( $curl, CURLOPT_POSTFIELDS, json_encode( [
        'CommandID'               => 'TransactionReversal',
        'Initiator'               => $this -> business,
        'SecurityCredential'      => $this -> credentials,
        'TransactionID'           => $TransactionID,
        'Amount'                  => $Amount,
        'ReceiverParty'           => $ReceiverParty,
        'RecieverIdentifierType'  => $RecieverIdentifierType,
        'ResultURL'               => $this -> result_url,
        'QueueTimeOutURL'         => $this -> timeout_url,
        'Remarks'                 => $Remarks,
        'Occasion'                => $Occasion
      ] ) );

      return json_decode( curl_exec( $curl ) );
    }

    /**
     * B2C API
     * @param $CommandID - Unique command for each transaction SalaryPayment | BusinessPayment | PromotionPayment
     * @param $Amount - The amount being transacted
     * @param $PartyB - Phone number receiving the transaction
     * @param $Remarks - Comments that are sent along with the transaction.
     * @param $Occasion -   Optional
     * @return string
     */
    public function b2c( $Amount, $PartyB, $CommandID = "BusinessToBusinessTransfer", $Occasion = null, $Remarks = "Business To Business Transfer" )
    {
      $url = ( $this -> live ) ? 'https://api.safaricom.co.ke/mpesa/b2c/v1/paymentrequest' : 'https://sandbox.safaricom.co.ke/mpesa/b2c/v1/paymentrequest';
      $CommandID = ( $CommandID == "BusinessToBusinessTransfer" ) ? $CommandID.date('YmdHis') : $CommandID;
      $Occasion = is_null( $Occasion ) ? $CommandID.date('YmdHis') : $Occasion;

      $curl = curl_init();
      curl_setopt( $curl, CURLOPT_URL, $url );
      curl_setopt( $curl, CURLOPT_HTTPHEADER, [ "Content-Type:application/json", "Authorization:Bearer {$this -> token}" ] ); 
      curl_setopt( $curl, CURLOPT_RETURNTRANSFER, true );
      curl_setopt( $curl, CURLOPT_POST, true );
      curl_setopt( $curl, CURLOPT_POSTFIELDS, json_encode( [
        'InitiatorName'       => $this -> username,
        'SecurityCredential'  => $this -> credentials,
        'CommandID'           => $CommandID ,
        'Amount'              => $Amount,
        'PartyA'              => $this -> shortcode ,
        'PartyB'              => $PartyB,
        'Remarks'             => $Remarks,
        'QueueTimeOutURL'     => $this -> timeout_url,
        'ResultURL'           => $this -> result_url,
        'Occasion'            => $Occasion
      ] ) );

      return json_decode( curl_exec( $curl ) );
    }

    /**
     * B2B API
     * @param $Amount - Amount
     * @param $PartyB - Organization’s short code receiving the funds being transacted.
     * @param $commandID - Unique command for each transaction - BusinessPayBill | MerchantToMerchantTransfer | MerchantTransferFromMerchantToWorking |  MerchantServicesMMFAccountTransfer |  AgencyFloatAdvance
     * @param $AccountReference - Account Reference mandatory for “BusinessPaybill” CommandID.
     * @param $RecieverIdentifierType - Type of organization receiving the funds being transacted - MSISDN | Till Number | Shortcode
     * @param $Remarks - Comments that are sent along with the transaction.
     * @return mixed-string
     */
    public function b2b( $Amount, $PartyB, $commandID, $AccountReference, $RecieverIdentifierType, $Remarks = "" )
    {
      $url = ( $this -> live ) ? 'https://api.safaricom.co.ke/mpesa/b2b/v1/paymentrequest' : 'https://sandbox.safaricom.co.ke/mpesa/b2b/v1/paymentrequest';

      $curl = curl_init();
      curl_setopt( $curl, CURLOPT_URL, $url );
      curl_setopt( $curl, CURLOPT_HTTPHEADER, [ "Content-Type:application/json", "Authorization:Bearer {$this -> token}" ] );
      curl_setopt( $curl, CURLOPT_RETURNTRANSFER, true );
      curl_setopt( $curl, CURLOPT_POST, true );
      curl_setopt( $curl, CURLOPT_POSTFIELDS, json_encode( [
        'Initiator'               => $this -> username,
        'SecurityCredential'      => $this -> credentials,
        'CommandID'               => $commandID,
        'SenderIdentifierType'    => $this -> type,
        'RecieverIdentifierType'  => $RecieverIdentifierType,
        'Amount'                  => $Amount,
        'PartyA'                  => $this -> shortcode,
        'PartyB'                  => $PartyB,
        'AccountReference'        => $AccountReference,
        'Remarks'                 => $Remarks,
        'QueueTimeOutURL'         => $this -> timeout_url,
        'ResultURL'               => $this -> result_url
      ] ) );

      return json_decode( curl_exec( $curl ) );
    }

    /**
     * C2B API
     * This API enables Paybill and Buy Goods merchants to integrate to M-Pesa and receive real time payments notifications.
     * @param $Amount - The amount being transacted.
     * @param $Msisdn - MSISDN ( phone number ) sending the transaction, start with country code without the plus( + ) sign.
     * @param $BillRefNumber -  Bill Reference Number ( Optional )
     * @param $CommandID - Unique command for each transaction type.
     * @return mixed-string
     */
    public function  c2b( $Amount, $Msisdn, $BillRefNumber = null, $CommandID = "CustomerPayBillOnline" )
    {
      $url = ( $this -> live ) ? 'https://api.safaricom.co.ke/mpesa/c2b/v1/simulate' : 'https://sandbox.safaricom.co.ke/mpesa/c2b/v1/simulate';
      $BillRefNumber = is_null( $BillRefNumber ) ? rand( 0, 1000000 ) : $BillRefNumber;

      $curl = curl_init();
      curl_setopt( $curl, CURLOPT_URL, $url );
      curl_setopt( $curl, CURLOPT_HTTPHEADER, [ "Content-Type:application/json", "Authorization:Bearer {$this -> token}" ] );
      curl_setopt( $curl, CURLOPT_HEADER, false );
      curl_setopt( $curl, CURLOPT_RETURNTRANSFER, true );
      curl_setopt( $curl, CURLOPT_POST, true );
      curl_setopt( $curl, CURLOPT_POSTFIELDS, json_encode( [
        'ShortCode'       => $this -> shortcode,
        'CommandID'       => $CommandID,
        'Amount'          => $Amount,
        'Msisdn'          => $Msisdn,
        'BillRefNumber'   => $BillRefNumber
      ] ) );

      return json_decode( curl_exec( $curl ) );
    }

    /**
     * Use this to initiate a balance inquiry request
     * @param string $CommandID - A unique command passed to the M-Pesa system.
     * @param string $IdentifierType -Type of organization receiving the transaction
     * @param string $Remarks - Comments that are sent along with the transaction.
     * @return array
     */
    public function balance( $CommandID = "AccountBalanceRequest", $Remarks = "Account Balance Request" )
    {

      $url = ( $this -> live ) ? 'https://api.safaricom.co.ke/mpesa/accountbalance/v1/query' : 'https://sandbox.safaricom.co.ke/mpesa/accountbalance/v1/query';
      $CommandID = ( $CommandID == "AccountBalanceRequest" ) ? $CommandID.date( "YmdHis" ) : $CommandID;
      $Remarks = ( $Remarks = "Account Balance Request on {date('D M d, Y')}"
      ) ? $Remarks : $Remarks;
      
      $curl = curl_init();
      curl_setopt( $curl, CURLOPT_URL, $url );
      curl_setopt( $curl, CURLOPT_HTTPHEADER, [ "Content-Type:application/json", "Authorization:Bearer {$this -> token}" ] );
      curl_setopt( $curl, CURLOPT_RETURNTRANSFER, true );
      curl_setopt( $curl, CURLOPT_POST, true );
      curl_setopt( $curl, CURLOPT_HEADER, false );
      curl_setopt( $curl, CURLOPT_POSTFIELDS, json_encode( [
        'CommandID'           => $CommandID,
        'Initiator'           => $this -> username,
        'SecurityCredential'  => $this -> credentials,
        'PartyA'              => $this -> shortcode,
        'IdentifierType'      => $this -> type,
        'Remarks'             => $Remarks,
        'QueueTimeOutURL'     => $this -> timeout_url,
        'ResultURL'           => $this -> result_url
      ] ) );

      return json_decode( curl_exec( $curl ) );
    }

    /**
     * Use this function to make a transaction status request
     * @param $TransactionID - Organization Receiving the funds.
     * @param $CommandID - Unique command for each transaction type, possible values are: TransactionStatusQuery.
     * @param $Remarks -    Comments that are sent along with the transaction
     * @param $Occasion -   Optional Parameter
     * @return mixed-string
     */
    public function status( $TransactionID, $CommandID = "TransactionStatusQuery", $Remarks = "Transaction Status Query", $Occasion = "" )
    {
      $url = ( $this -> live ) ? 'https://api.safaricom.co.ke/mpesa/transactionstatus/v1/query' : 'https://sandbox.safaricom.co.ke/mpesa/transactionstatus/v1/query';
      
      $curl = curl_init();
      curl_setopt( $curl, CURLOPT_URL, $url );
      curl_setopt( $curl, CURLOPT_HTTPHEADER, [ "Content-Type:application/json", "Authorization:Bearer {$this -> token}" ] );
      curl_setopt( $curl, CURLOPT_RETURNTRANSFER, true );
      curl_setopt( $curl, CURLOPT_POST, true );
      curl_setopt( $curl, CURLOPT_HEADER, false );
      curl_setopt( $curl, CURLOPT_POSTFIELDS, json_encode( [
        'Initiator'           => $this -> username,
        'SecurityCredential'  => $this -> credentials,
        'CommandID'           => $CommandID,
        'TransactionID'       => $TransactionID,
        'PartyA'              => $this -> shortcode,
        'IdentifierType'      => $this -> type,
        'ResultURL'           => $this -> result_url,
        'QueueTimeOutURL'     => $this -> timeout_url,
        'Remarks'             => $Remarks,
        'Occasion'            => $Occasion
      ] ) );

      return json_decode( curl_exec( $curl ) );
    }

    /**
     * Use this function to initiate an online customer checkout
     * @param $Amount - The amount to be transacted.
     * @param $PartyB - The organization shortcode receiving the funds
     * @param $PhoneNumber - The MSISDN sending the funds.
     * @param $AccountReference - Used with M-Pesa PayBills.
     * @param $TransactionDesc - A description of the transaction.
     * @param $Remark - Remarks
     *
     * @return mixed-string
     */
    public function checkout( $Amount, $PhoneNumber, $AccountReference = "", $TransactionDesc = "", $Remarks = "" )
    {
      $url = ( $this -> live ) ? 'https://api.safaricom.co.ke/mpesa/stkpush/v1/processrequest' : 'https://sandbox.safaricom.co.ke/mpesa/stkpush/v1/processrequest';
      $timestamp = date( "YmdHis" );
      $password = base64_encode( $this -> shortcode.$this -> passkey.$timestamp );

      $curl = curl_init();
      curl_setopt( $curl, CURLOPT_URL, $url );
      curl_setopt( $curl, CURLOPT_HTTPHEADER, [ "Content-Type:application/json", "Authorization:Bearer {$this -> token}" ] );
      curl_setopt( $curl, CURLOPT_HEADER, false );
      curl_setopt( $curl, CURLOPT_RETURNTRANSFER, true );
      curl_setopt( $curl, CURLOPT_POST, true );
      curl_setopt( $curl, CURLOPT_POSTFIELDS, json_encode( [
        'BusinessShortCode'   => $this -> shortcode,
        'Password'            => $password,
        'Timestamp'           => $timestamp,
        'TransactionType'     => 'CustomerPayBillOnline',
        'Amount'              => $Amount,
        'PartyA'              => $PhoneNumber,
        'PartyB'              => $this -> shortcode,
        'PhoneNumber'         => $PhoneNumber,
        'CallBackURL'         => $this -> callback_url,
        'AccountReference'    => $AccountReference,
        'TransactionDesc'     => $TransactionDesc,
        'Remark'              => $Remarks
      ] ) );

      return json_decode( curl_exec( $curl ) );
    }

    /**
     * Use this function to initiate an STKPush Status Query request.
     * @param $checkoutRequestID - Checkout RequestID
     * @return mixed-string
     */
    public function stkpush( $checkoutRequestID )
    {
      $url = ( $this -> live ) ? 'https://api.safaricom.co.ke/mpesa/stkpushquery/v1/query' : 'https://sandbox.safaricom.co.ke/mpesa/stkpushquery/v1/query';
      $timestamp = date( "YmdHis" );
      $password = base64_encode( $this -> shortcode.$this -> password.$timestamp );

      $curl = curl_init();
      curl_setopt( $curl, CURLOPT_URL, $url );
      curl_setopt( $curl, CURLOPT_HTTPHEADER, [ "Content-Type:application/json", "Authorization:Bearer {$this -> token}" ] );
      curl_setopt( $curl, CURLOPT_RETURNTRANSFER, true );
      curl_setopt( $curl, CURLOPT_POST, true );
      curl_setopt( $curl, CURLOPT_HEADER, false );
      curl_setopt( $curl, CURLOPT_POSTFIELDS, json_encode( [
        'BusinessShortCode'   => $this -> shortcode,
        'Password'            => $password,
        'Timestamp'           => $timestamp,
        'CheckoutRequestID'   => $checkoutRequestID
      ] ) );

      return json_decode( curl_exec( $curl ) );
    }

    public function proceed()
    {
      header("Access-Control-Allow-Origin: *");
      header('Content-Type:Application/json' );
      echo( json_encode( [ 
        'ResponseCode'  => 0, 
        'ResponseDesc'  => 'Service Request Accepted' 
      ] ) );
    }

    public function reject()
    {
      header("Access-Control-Allow-Origin: *");
      header('Content-Type:Application/json' );
      echo( json_encode( [ 
        'ResponseCode'  => 1, 
        'ResponseDesc'  => 'Service Request Rejected' 
      ] ) );
    }
}